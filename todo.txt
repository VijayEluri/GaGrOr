=========================================
TODO list in order of decreasing priority
=========================================

User functionality: Log in and change password.

Change Encrypter to a proper helper, to avoid using static classes.

Move constants to their own class/interface in the se.spacejens.gagror package.

Use abstract type for enums, defining integer code (with Hibernate type mapping) and display text

Implement hashCode, equals, and toString methods for entities properly

Create more user-friendly form validation error messages

Add Spring TLD, using JSP fragments for tag definitions

Remove Message entity, Welcome controller etc.

Add more framework unit tests (and in the future, write new tests when adding functionality)

Clean up pom.xml, define properties for all versions, sort for readability, add more information
Remove unused dependencies (replace HttpServletRequest with HttpRequest to eliminate?), check dependency versions

Add Hibernate lifecycle interceptor, use to store entity changes and to check editing permissions

Set cookie with session handle when logging in. Use it in place of login if session times out

Refactor JSP pages for CSS use and add CSS file

Further description of project purpose and technologies in README file

=====================================
Ideas, not yet decided or prioritized
=====================================

User-User relationship either mapped twice (friends, friendsOf) or stored in strict ID order (ID1 < ID2). Needs decision

Better solution (investigate how) for how to access persistence_2_0.xsd in correct location

Enable cacheing of entities using @Cacheable annotation (needs study)

Create parallell DTO and entity classes, since EJB will detach entities it should return DTOs. Or, alternatively, use entity class as DTO as well.
Another option is to return detached entity object, but make sure that all data needed by the view layer has been fetched (to prevent lazy fetching
from causing exceptions when attempted on the detached entities).

Possibly save helper and DAO instances in the JPA context instead, to avoid creating multiple instances of the same helper/DAO in different places.

==============
Rejected ideas
==============

Use embeddable data types instead of plain Java types in mappings. View layer responsible for input parsing. Rejected since there is not enough
freedom in how embeddable types can be used. An @Embeddable type cannot inherit from another @Embeddable type, and @GeneratedValue cannot be used
on @EmbeddedId. Might still be possible if ID types are custom created, could be investigated in the future.
	https://forums.hibernate.org/viewtopic.php?p=2393944&sid=57b20ef2c7de6f6bcba632130987bc22
	http://en.wikibooks.org/wiki/Java_Persistence/Embeddables#Inheritance
