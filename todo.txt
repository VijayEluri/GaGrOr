=========================================
TODO list in order of decreasing priority
=========================================

Add Hibernate validator

Use embeddable data types instead of plain Java types in mappings. View layer responsible for input parsing

Create user entity. Store username and password in session when logging in

Use abstract type for enums, defining integer code (with Hibernate type mapping) and display text

Remove Message entity, Welcome controller etc.

Add more framework unit tests (and in the future, write new tests when adding functionality)

Add Hibernate lifecycle interceptor, use to store entity changes and to check editing permissions

Set cookie with session handle when logging in. Use it in place of login if session times out

=====================================
Ideas, not yet decided or prioritized
=====================================

Create service factory in service package, move all service interfaces there. This would hide service technology choice from view layer. Worth it?

User-User relationship either mapped twice (friends, friendsOf) or stored in strict ID order (ID1 < ID2). Needs decision

Better solution (investigate how) for how to access persistence_2_0.xsd in correct location

Enable cacheing of entities using @Cacheable annotation (needs study)

Create parallell DTO and entity classes, since EJB will detach entities it should return DTOs. Or, alternatively, use entity class as DTO as well
